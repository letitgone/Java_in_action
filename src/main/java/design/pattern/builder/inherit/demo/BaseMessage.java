package design.pattern.builder.inherit.demo;public class BaseMessage {    /**     * 消息类型:text、textcard、     */    private String msgtype;    /**     * 应用id     */    private Integer agentid;    /**     * 加密方式。默认不传或传0传2不进行任何解密处理直接发送文本 。传1对整个文本内容将进行base64解密。传3对整个文本内容进行UrlEncode编码     */    private String touser;    /**     * 部门ID列表，多个接收者用‘|’分隔，最多支持100个。部门id请查询OA接口获取部门id。注：使用该参数会对整个部门的全部人员进行群发，请慎重使用     */    private String toparty;    /**     * 标签ID列表，多个接收者用‘|’分隔，最多支持100个。当touser为@all时忽略本参数。     */    private String totag;    /**     * 表示是否是保密消息，0表示否，1表示是，默认0     */    private Integer safe;    public BaseMessage(String msgtype) {        this.msgtype = msgtype;    }    public BaseMessage() {    }    public <T extends BaseMessageBuilder> BaseMessage(BaseMessageBuilder builder) {        this.msgtype = builder.msgtype;        this.agentid = builder.agentid;        this.touser = builder.touser;        this.toparty = builder.toparty;        this.totag = builder.totag;        this.safe = builder.safe;    }    public String getMsgtype() {        return msgtype;    }    public Integer getAgentid() {        return agentid;    }    public String getTouser() {        return touser;    }    public String getToparty() {        return toparty;    }    public String getTotag() {        return totag;    }    public Integer getSafe() {        return safe;    }    /**     * 在父类中使用泛型 根据调用的子类不同 返回子类对应的Builder     */    public static class BaseMessageBuilder<T extends BaseMessageBuilder> {        private String msgtype;        private Integer agentid;        private String touser;        private String toparty;        private String totag;        private Integer safe;        public BaseMessageBuilder(String msgtype) {            this.msgtype = msgtype;        }        public T agentid(Integer agentid) {            this.agentid = agentid;            return (T) this;        }        public T touser(String touser) {            this.touser = touser;            return (T) this;        }        public T toparty(String toparty) {            this.toparty = toparty;            return (T) this;        }        public T totag(String totag) {            this.totag = totag;            return (T) this;        }        public T safe(Integer safe) {            this.safe = safe;            return (T) this;        }    }}